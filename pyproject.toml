[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "seed_parser"
version = "0.1.0"
description = "A high-performance tool for parsing and generating cryptocurrency wallets from seed phrases"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
keywords = ["cryptocurrency", "wallet", "seed-phrase", "bitcoin", "ethereum"]
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "hdwallet>=2.2.1",
    "eth-account>=0.10.0",
    "eth-utils>=2.3.0",
    "coincurve>=18.0.0",
    "mnemonic>=0.20",
    "rich>=13.7.0",
    "tqdm>=4.66.1",
]

[project.urls]
Documentation = "https://github.com/yourusername/seed_parser#readme"
Source = "https://github.com/yourusername/seed_parser"
"Bug Tracker" = "https://github.com/yourusername/seed_parser/issues"

[project.scripts]
seed-parser = "seed_parser.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/seed_parser"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.9",
    "mypy>=1.7.0",
    "black>=23.12.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
]
lint = [
    "ruff>=0.1.9",
    "mypy>=1.7.0",
    "black>=23.12.0",
]

[tool.ruff]
line-length = 88
target-version = "py38"
extend-exclude = [
    "tests/*",
    ".venv/*",
    ".git/*",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "S",   # flake8-bandit
    "UP",  # pyupgrade
]
ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=seed_parser --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
strict_optional = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true
pretty = true

[tool.coverage.run]
branch = true
source = ["src/seed_parser"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
